[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ml-project"
version = "0.1.0"
description = "A comprehensive machine learning pipeline project"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["machine-learning", "mlops", "data-science", "pipeline"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies
dependencies = [
    # Data manipulation and analysis
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    
    # Machine learning frameworks
    "xgboost>=1.7.0",
    "lightgbm>=4.0.0",
    
    # Deep learning (optional)
    "torch>=2.0.0",
    "tensorflow>=2.13.0",
    
    # Data validation and preprocessing
    "pydantic>=2.0.0",
    "pandera>=0.17.0",
    
    # Configuration management
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "hydra-core>=1.3.0",
    
    # Logging and monitoring
    "loguru>=0.7.0",
    "mlflow>=2.7.0",
    
    # Visualization
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    
    # API framework
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    
    # Database and storage
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "boto3>=1.28.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.1.0",
    "mkdocstrings[python]>=0.22.0",
]

# Jupyter notebook dependencies
notebooks = [
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "ipywidgets>=8.1.0",
    "jupyterlab>=4.0.0",
]

# Production deployment dependencies
prod = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.17.0",
    "sentry-sdk>=1.29.0",
]

# All optional dependencies
all = [
    "ml-project[dev,docs,notebooks,prod]"
]

[project.urls]
Homepage = "https://github.com/yourusername/ml-project"
Documentation = "https://yourusername.github.io/ml-project"
Repository = "https://github.com/yourusername/ml-project.git"
Issues = "https://github.com/yourusername/ml-project/issues"

[project.scripts]
# Command-line entry points
ml-train = "src.scripts.train_model:main"
ml-evaluate = "src.scripts.evaluate_model:main"
ml-predict = "src.scripts.batch_predict:main"
ml-serve = "src.api.app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "docs*", "notebooks*"]

[tool.setuptools.package-data]
"src" = ["*.yaml", "*.yml", "*.json"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["pandas", "numpy", "sklearn", "torch", "tensorflow"]

# Flake8 linting (in setup.cfg or .flake8)
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    ".env"
]

# MyPy static type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "sklearn.*",
    "xgboost.*",
    "lightgbm.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "gpu: Tests requiring GPU",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.5.1",
        hooks = [{id = "mypy", additional_dependencies = ["types-PyYAML"]}]
    }
]